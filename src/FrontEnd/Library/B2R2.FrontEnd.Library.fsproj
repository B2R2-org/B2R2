<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.1</TargetFramework>
    <IsPackable>true</IsPackable>
    <IsTestProject>false</IsTestProject>
    <PackageId>B2R2.FrontEnd</PackageId>
    <PackageLicenseFile>LICENSE.md</PackageLicenseFile>
    <PackageIcon>b2r2-240x240.png</PackageIcon>
    <RepositoryUrl>https://github.com/B2R2-org/B2R2</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="BinHandlerHelper.fs" />
    <Compile Include="BinHandler.fsi" />
    <Compile Include="BinHandler.fs" />
    <Compile Include="CallingConvention.fsi" />
    <Compile Include="CallingConvention.fs" />
    <None Include="b2r2-240x240.png" Pack="true" PackagePath="" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\Core\B2R2.Core.fsproj" PrivateAssets="all"/>
    <ProjectReference Include="..\..\BinIR\B2R2.BinIR.fsproj" PrivateAssets="all"/>
    <ProjectReference Include="..\..\ConcEval\B2R2.ConcEval.fsproj" PrivateAssets="all"/>
    <ProjectReference Include="..\..\BinFile\B2R2.BinFile.fsproj" PrivateAssets="all"/>
    <ProjectReference Include="..\Core\B2R2.FrontEnd.Core.fsproj" PrivateAssets="all"/>
    <ProjectReference Include="..\Intel\B2R2.FrontEnd.Intel.fsproj" PrivateAssets="all"/>
    <ProjectReference Include="..\ARM32\B2R2.FrontEnd.ARM32.fsproj" PrivateAssets="all"/>
    <ProjectReference Include="..\ARM64\B2R2.FrontEnd.ARM64.fsproj" PrivateAssets="all"/>
    <ProjectReference Include="..\MIPS\B2R2.FrontEnd.MIPS.fsproj" PrivateAssets="all"/>
    <ProjectReference Include="..\EVM\B2R2.FrontEnd.EVM.fsproj" PrivateAssets="all"/>
    <ProjectReference Include="..\TMS320C6000\B2R2.FrontEnd.TMS320C6000.fsproj" PrivateAssets="all"/>
    <ProjectReference Include="..\Optimizer\B2R2.FrontEnd.Optimizer.fsproj" PrivateAssets="all"/>
    <None Include="..\..\..\LICENSE.md" Pack="true" PackagePath=""/>
  </ItemGroup>

  <!-- Manually add this reference from BinFile to get around the GitHub issue below. -->
  <ItemGroup>
    <PackageReference Include="System.Reflection.Metadata" Version="1.6.0" />
  </ItemGroup>

  <!-- Below is a workaround approach taken from https://github.com/NuGet/Home/issues/3891 -->
  <PropertyGroup>
    <TargetsForTfmSpecificBuildOutput>
      $(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage
    </TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>

  <!-- adds the output of all referenced projects with PrivateAssets="all" to the package -->
  <Target Name="CopyProjectReferencesToPackage" Inputs="@(ReferenceCopyLocalPaths->WithMetadataValue('ReferenceSourceTarget', 'ProjectReference'))" Outputs="%(ProjectReference.Identity)"
      DependsOnTargets="BuildOnlySettings;ResolveReferences">
    <PropertyGroup>
      <CurrentReference>%(ProjectReference.Identity)</CurrentReference>
      <CurrentReferenceName>$([System.IO.Path]::GetFileNameWithoutExtension($(CurrentReference)))</CurrentReferenceName>
    </PropertyGroup>

    <Message Text="Adding reference $(CurrentReferenceName) to package..." Importance="high" Condition="'%(ProjectReference.PrivateAssets)'=='all' And '%(ProjectReference.NugetIgnore)'!='true'"/>
    <ItemGroup>
      <!-- this includes all build output items produced by all referenced project, but MSBuild filters out some extensions like .config and .pdb => only .dll/.exe and .xml are actually included -->
      <BuildOutputInPackage Include="@(ReferenceCopyLocalPaths->WithMetadataValue('OriginalProjectReferenceItemSpec', '$(CurrentReference)'))"
                  Condition="'%(ProjectReference.PrivateAssets)'=='all' And '%(ProjectReference.NugetIgnore)'!='true'"/>
    </ItemGroup>

    <Message Text="Skipping reference $(CurrentReferenceName) as PrivateAssets != all (is '%(ProjectReference.PrivateAssets)') or NugetIgnore == true (is '%(ProjectReference.NugetIgnore)')..." Importance="high"
         Condition="'%(ProjectReference.PrivateAssets)'!='all' Or '%(ProjectReference.NugetIgnore)'=='true'"/>
  </Target>

  <!-- copy all PDB files of all referenced projects to the package if IncludeSymbols is set to true -->
  <!-- because this include is also valid for the non-symbols package we can not use that package from the symbols build (=> reason for the two inner calls to Pack) -->
  <Target Name="CopyPdbToPackage" Inputs="@(ReferenceCopyLocalPaths->WithMetadataValue('ReferenceSourceTarget', 'ProjectReference'))" Outputs="%(ProjectReference.Identity)"
      AfterTargets="CopyProjectReferencesToPackage" Condition="'$(IncludeSymbols)'=='true'">
    <PropertyGroup>
      <CurrentReference>%(ProjectReference.Identity)</CurrentReference>
      <CurrentReferenceName>$([System.IO.Path]::GetFileNameWithoutExtension($(CurrentReference)))</CurrentReferenceName>
    </PropertyGroup>

    <Message Text="Copying PDB of $(CurrentReferenceName) to packages..." Importance="high" Condition="'%(ProjectReference.PrivateAssets)'=='all' And '%(ProjectReference.NugetIgnore)'!='true'"/>
    <ItemGroup>
      <!-- filter the correct PDB out of all ReferenceCopyLocalPaths items -->
      <AllItems Include="@(ReferenceCopyLocalPaths->WithMetadataValue('OriginalProjectReferenceItemSpec', '$(CurrentReference)'))"/>
      <PdbFiles Include="%(AllItems.Identity)" Condition="@(AllItems->EndsWith('.pdb'))=='true'" />
    </ItemGroup>
    <ItemGroup>
      <TfmSpecificPackageFile Include="@(PdbFiles)" Condition="'%(ProjectReference.PrivateAssets)'=='all' And '%(ProjectReference.NugetIgnore)'!='true'">
        <PackagePath>lib/$(TargetFramework)</PackagePath>
      </TfmSpecificPackageFile>
    </ItemGroup>

    <Message Text="Skipping PDB of $(CurrentReferenceName) as PrivateAssets != all (is '%(ProjectReference.PrivateAssets)') or NugetIgnore == true (is '%(ProjectReference.NugetIgnore)')..." Importance="high"
         Condition="'%(ProjectReference.PrivateAssets)'!='all' Or '%(ProjectReference.NugetIgnore)'=='true'"/>
  </Target>

</Project>
